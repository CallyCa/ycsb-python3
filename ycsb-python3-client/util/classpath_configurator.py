import os
import fnmatch
import subprocess
import sys
from logging import debug, warn, error

class ClasspathConfigurator:
    """
    Configures the classpath for YCSB executions, supporting both development and distribution environments.
    """
    
    def __init__(self, args, ycsb_home, binding):
        """
        Initialize the ClasspathConfigurator with command line arguments, YCSB home directory, and database binding.
        
        :param args: Command line arguments
        :param ycsb_home: The home directory of YCSB
        :param binding: The specific database binding
        """
        self.args = args
        self.ycsb_home = ycsb_home
        self.binding = binding

    def configure_classpath(self):
        """
        Determines the classpath based on the environment (development or distribution).
        
        Returns:
            A string that represents the complete classpath needed to run YCSB.
        """
        if self.is_development_environment():
            return self.configure_classpath_for_development()
        else:
            return self.configure_classpath_for_distribution()

    def is_development_environment(self):
        """
        Checks if the current setup is a development environment by looking for source code specific setups.
        
        Returns:
            Boolean indicating if the environment is for development.
        """
        return "pom.xml" in os.listdir(self.ycsb_home)

    def configure_classpath_for_development(self):
        """
        Configures the classpath from the Maven project for a development environment.
        
        Returns:
            A string representing the classpath necessary for development.
        """
        warn("Running against a source checkout. In order to get our runtime dependencies, we'll have to invoke Maven.")
        project = self.determine_project_name()
        maven_classpath = self.get_classpath_from_maven(project)
        db_dir = self.determine_database_directory()
        jars = self.find_jars(os.path.join(db_dir, "target"), f"{project}*.jar")
        jars.append(maven_classpath)
        return self.construct_final_classpath(jars)

    def determine_project_name(self):
        """
        Determines the project name based on the binding.
        
        Returns:
            A string representing the Maven project name.
        """
        return f"{self.binding}-binding" if self.binding not in {"basic", "basicts"} else "core"

    def determine_database_directory(self):
        """
        Determines the directory for database related files.
        
        Returns:
            A string representing the database directory.
        """
        return os.path.join(self.ycsb_home, self.binding if self.binding not in {"basic", "basicts"} else "core")

    def get_classpath_from_maven(self, module):
        """
        Generates the classpath by invoking Maven on the specified module.
        
        :param module: The Maven module to build the classpath for
        :return: A string representing the classpath generated by Maven
        """
        mvn_command = self.build_maven_command(module)
        debug(f"Running Maven to generate classpath: {' '.join(mvn_command)}")
        return self.execute_maven_command(mvn_command)

    def build_maven_command(self, module):
        """
        Builds the Maven command used to generate the classpath.
        
        :param module: The Maven module name
        :return: A list of command line arguments for Maven.
        """
        return [
            "mvn", "-pl", f"site.ycsb:{module}", "-am", "package", "-DskipTests",
            "dependency:build-classpath", "-DincludeScope=compile", "-Dmdep.outputFilterFile=true"
        ]

    def execute_maven_command(self, mvn_command):
        """
        Executes the Maven command and handles its output.
        
        :param mvn_command: The Maven command as a list of strings.
        :return: A string representing the Maven generated classpath.
        """
        try:
            mvn_output = subprocess.check_output(mvn_command)
            return self.extract_classpath_from_output(mvn_output.decode('utf-8'))
        except subprocess.CalledProcessError as err:
            self.handle_maven_error(err, mvn_command)

    def extract_classpath_from_output(self, output):
        """
        Extracts the classpath from Maven output.
        
        :param output: Maven output as a string.
        :return: Extracted classpath.
        """
        classpath_lines = [line for line in output.splitlines() if line.startswith("classpath=")]
        if classpath_lines:
            return classpath_lines[-1][len("classpath="):]
        error("No classpath found in Maven output.")
        sys.exit(1)

    def handle_maven_error(self, err, mvn_command):
        """
        Handles errors during the Maven command execution.
        
        :param err: The subprocess.CalledProcessError exception.
        :param mvn_command: The Maven command as a list of strings.
        """
        error_msg = (
            f"Failed to generate classpath from Maven with return code {err.returncode}. "
            f"Try manually running the command to diagnose issues:\n"
            f"{' '.join(mvn_command)}\n\nMaven output:\n{err.output.decode()}"
        )
        error(error_msg)
        sys.exit(err.returncode)

    def construct_final_classpath(self, jars):
        """
        Constructs the final classpath string by appending additional classpath entries.
        
        :param jars: A list of jar file paths.
        :return: A string representing the final classpath.
        """
        classpath = os.pathsep.join(jars)
        if self.args.classpath:
            classpath = os.pathsep.join([self.args.classpath, classpath])
        return classpath

    def find_jars(self, dir, glob='*.jar'):
        """
        Finds all jar files in the specified directory that match the given glob pattern.
        
        :param dir: The directory to search
        :param glob: The glob pattern to match files
        :return: A list of paths to jar files
        """
        jars = []
        for dirpath, _, filenames in os.walk(dir):
            for filename in fnmatch.filter(filenames, glob):
                jars.append(os.path.join(dirpath, filename))
        return jars
